CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Feed(
	[FeedID] [int] IDENTITY(1,1) NOT NULL,
	[ModuleID] [int] NOT NULL,
	[Title] [nvarchar](255) NULL,
	[Url] [nvarchar](255) NOT NULL,
	[UserID] [int] NOT NULL,
	[AutoFeature] [bit] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[DateMode] [int] NOT NULL CONSTRAINT [DF_{objectQualifier}DnnForge_NewsArticles_Feed_DateMode]  DEFAULT ((0)),
	[AutoExpire] [int] NULL,
	[AutoExpireUnit] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_Feed] PRIMARY KEY CLUSTERED 
(
	[FeedID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedCategory(
	[FeedID] [int] NOT NULL,
	[CategoryID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_FeedCategory] PRIMARY KEY CLUSTERED 
(
	[FeedID] ASC,
	[CategoryID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating(
	[RatingID] [int] IDENTITY(1,1) NOT NULL,
	[ArticleID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[Rating] [float] NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_Rating] PRIMARY KEY CLUSTERED 
(
	[RatingID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetAuthorStatistics
	@ModuleID	int, 
	@CategoryID 	varchar(255),
	@AuthorID int,
	@SortBy	varchar(255),
	@ShowPending bit  
AS

DECLARE @strTop	nvarchar(2000)
DECLARE @strWhere	nvarchar(2000)

SELECT @strTop = ''
SELECT @strWhere = ''

IF (@ModuleID is not null)
	SELECT @strWhere = @strWhere + ' AND Articles.ModuleID = ' + convert(nvarchar, @ModuleId)
	
IF (@CategoryId is not null)
	SELECT @strWhere = @strWhere + ' AND Articles.ArticleID in (select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories ArticleCategories where ArticleCategories.CategoryID in (' + @CategoryID + '))'

IF (@AuthorID is not null)
	SELECT @strWhere = @strWhere + ' AND Articles.AuthorID = ' + convert(nvarchar, @AuthorID)

IF (@ShowPending is null )
	SELECT @strWhere = @strWhere + ' AND (Articles.StartDate is null OR Articles.StartDate < ''' + convert(nvarchar, DateAdd(mi, 1, GetDate()))  + ''')'

EXEC('
SELECT     
	UserID, UserName, DisplayName, FirstName, LastName, count(*) as ''ArticleCount''   
FROM         
	{databaseOwner}{objectQualifier}Users Users, {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article Articles
where Articles.IsApproved = 1 and Articles.IsDraft = 0 and Users.UserID = Articles.AuthorID ' + 
	@strWhere + ' 
GROUP BY 
	UserID, UserName, DisplayName, FirstName, LastName
ORDER BY ' +
	@SortBy)
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetNewsArchive 
	@ModuleID int, 
	@CategoryID varchar(255),
	@AuthorID int,
	@GroupBy varchar(255),
	@ShowPending bit   
AS

DECLARE @strTop	nvarchar(2000)
DECLARE @strWhere	nvarchar(2000)

SELECT @strTop = ''
SELECT @strWhere = ''

IF (@ModuleID is not null)
	SELECT @strWhere = @strWhere + ' AND Article.ModuleID = ' + convert(nvarchar, @ModuleId)
	
IF (@CategoryId is not null)
	SELECT @strWhere = @strWhere + ' AND Article.ArticleID in ( select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories where {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.CategoryID in (' + @CategoryID + '))'

IF (@AuthorID is not null)
	SELECT @strWhere = @strWhere + ' AND Article.AuthorID = ' + convert(nvarchar, @AuthorID)

IF (@ShowPending is null)
BEGIN
	SELECT @strWhere = @strWhere + ' AND (Article.StartDate is null or Article.StartDate < ''' + convert(nvarchar, DateAdd(mi, 1, GetDate()))  + ''')'
END

IF( @GroupBy = 'Month' )
BEGIN
EXEC('
    select Month(StartDate) as [Month], Year(StartDate) as [Year], 1 as Day, Count(*) as [Count]
    from {databaseOwner}{objectQualifier}dnnforge_newsarticles_article Article
    where IsApproved = 1 and IsDraft = 0 ' + 
	    @strWhere + '
    group by Year(StartDate), Month(StartDate)
    order by [Year] desc, [Month] desc')
END
ELSE
BEGIN
EXEC('
    select 1 as [Month], Year(StartDate) as [Year], 1 as Day, Count(*) as [Count]
    from {databaseOwner}{objectQualifier}dnnforge_newsarticles_article Article
    where IsApproved = 1 and IsDraft = 0 ' + 
	    @strWhere + '
    group by Year(StartDate)
    order by [Year] desc')
END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetCategoryListAll 
	@ModuleID int,
	@Current int, 
	@CategoryID varchar(255), 
	@AuthorID int,
	@MaxDepth int,
	@ShowPending bit   
AS

SET NOCOUNT ON

DECLARE @FilterID int
SET @FilterID = @Current

DECLARE @level int, @line int
 
CREATE TABLE #hierarchy(HierarchyID int IDENTITY (1,1), CategoryID int, level int)
CREATE TABLE #stack (item int, level int)
INSERT INTO #stack VALUES (@current, 1)
SELECT @level = 1
 
WHILE @level > 0
BEGIN
   IF EXISTS (SELECT * FROM #stack WHERE level = @level)
      BEGIN
         SELECT @current = item
         FROM #stack
         WHERE level = @level
 
 		insert into #hierarchy(CategoryID, level) values(@current, @level) 
 
         DELETE FROM #stack
         WHERE level = @level
            AND item = @current
            
 		 IF( @MaxDepth IS NULL OR @MaxDepth >= @level )
		 BEGIN
             INSERT #stack
                SELECT CategoryID, @level + 1
                FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category
                WHERE ParentID = @current and ModuleID = @ModuleID 
     	        ORDER BY [SortOrder] DESC, [Name] DESC

             IF @@ROWCOUNT > 0
                SELECT @level = @level + 1
		 END
      END
   ELSE
      SELECT @level = @level - 1
END -- WHILE

IF( @FilterID IS NOT NULL )
BEGIN
	DELETE FROM #hierarchy WHERE CategoryID = @FilterID
END

DECLARE @strModuleID	nvarchar(50)
SELECT @strModuleID = convert(varchar, @ModuleID)

DECLARE @strCategoryId	nvarchar(255)
IF (@CategoryId is not null)
	SELECT @strCategoryId = ' AND c.CategoryID in (' + @CategoryID + ')'

DECLARE @strAuthorId	nvarchar(255)
IF (@authorId is not null)
	SELECT @strAuthorId = ' AND a.AuthorID = ' + cast(@AuthorID as nvarchar)

DECLARE @strPending nvarchar(2000)
IF (@ShowPending is null) 
	SELECT @strPending = ' AND (a.StartDate IS NULL OR a.StartDate < GetDate())'

EXEC('
SELECT
	c.[CategoryID],
	c.[ParentID],
	c.[ModuleID],
	c.[Name],
	REPLICATE(''.'',(level-2)*2) + c.[Name] as ''NameIndented'',
	c.[Image],
	c.[Description],
	c.[SortOrder],
	level-1 as ''Level'',
	(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories ac INNER JOIN {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article a ON ac.ArticleID = a.ArticleID WHERE ac.CategoryID = c.CategoryID AND a.IsDraft = 0 AND a.IsApproved = 1 ' + @strAuthorId + @strPending + ') as ''NumberofArticles'',
	(SELECT SUM(a.NumberOfViews) FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article a INNER JOIN {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories ac ON a.ArticleID = ac.ArticleID WHERE ac.CategoryID = c.CategoryID) as ''NumberofViews''
FROM
	#hierarchy h INNER JOIN
		{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category c ON h.CategoryID = c.CategoryID 
WHERE
	c.[ModuleID] = ' + @strModuleID + @strCategoryId + ' 
ORDER BY 
	h.HierarchyID ASC')

drop table #hierarchy
drop table #stack
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ImageAdd 
	@ArticleID int,
	@Title nvarchar(100),
	@FileName nvarchar(100),
	@Extension nvarchar(100),
	@Size int,
	@Width int,
	@Height int,
	@ContentType nvarchar(200),
	@Folder nvarchar(200),
	@SortOrder int,
	@ImageGuid nvarchar(50)
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Image (
	[ArticleID],
	[Title], 
	[FileName],
	[Extension],
	[Size],
	[Width],
	[Height],
	[ContentType],
	[Folder],
	[SortOrder],
	[ImageGuid]
) VALUES (
	@ArticleID,
	@Title, 
	@FileName,
	@Extension,
	@Size,
	@Width,
	@Height,
	@ContentType,
	@Folder,
	@SortOrder,
	@ImageGuid 
)

select SCOPE_IDENTITY()
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ImageUpdate 
	@ImageID int, 
	@ArticleID int,
	@Title nvarchar(100),
	@FileName nvarchar(100),
	@Extension nvarchar(100),
	@Size int,
	@Width int,
	@Height int,
	@ContentType nvarchar(200),
	@Folder nvarchar(200),
	@SortOrder int,
	@ImageGuid nvarchar(50)
AS

UPDATE
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Image
SET
	[ArticleID] = @ArticleID,
	[Title] = @Title,
	[FileName] = @FileName,
	[Extension] = @Extension,
	[Size] = @Size,
	[Width] = @Width,
	[Height] = @Height,
	[ContentType] = @ContentType,
	[Folder] = @Folder,
	[SortOrder] = @SortOrder,
	[ImageGuid] = @ImageGuid
WHERE
	[ImageID] = @ImageID
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomField(
	[CustomFieldID] [int] IDENTITY(1,1) NOT NULL,
	[ModuleID] [int] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[FieldType] [int] NOT NULL,
	[FieldElements] [ntext] NULL,
	[DefaultValue] [nvarchar](255) NULL,
	[Caption] [nvarchar](255) NULL,
	[CaptionHelp] [nvarchar](255) NULL,
	[IsRequired] [bit] NOT NULL,
	[IsVisible] [bit] NOT NULL,
	[SortOrder] [int] NOT NULL,
	[ValidationType] [int] NOT NULL,
	[RegularExpression] [nvarchar](4000) NULL,
	[Length] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_CustomField] PRIMARY KEY CLUSTERED 
(
	[CustomFieldID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ImageGet 
	@ImageID int 
AS

SELECT     
	ImageID, 
	ArticleID, 
	Title, 
	FileName, 
	Extension, 
	Size, 
	Width, 
	Height, 
	ContentType, 
	Folder, 
	SortOrder, 
	ImageGuid
FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Image
WHERE
	ImageID = @ImageID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ImageList 
	@ArticleID int,
	@ImageGuid nvarchar(50)  
AS

SELECT     
	ImageID, 
	ArticleID, 
	Title, 
	FileName, 
	Extension, 
	Size, 
	Width, 
	Height, 
	ContentType, 
	Folder, 
	SortOrder, 
	ImageGuid
FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Image
WHERE
	(@ArticleID IS NULL OR ArticleID = @ArticleID) 
	AND
	(@ImageGuid IS NULL OR ImageGuid = @ImageGuid) 
ORDER BY 
    SortOrder
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomValue(
	[CustomValueID] [int] IDENTITY(1,1) NOT NULL,
	[ArticleID] [int] NOT NULL,
	[CustomFieldID] [int] NOT NULL,
	[CustomValue] [ntext] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_CustomValue] PRIMARY KEY CLUSTERED 
(
	[CustomValueID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ImageDelete 
	@ImageID int 
AS

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Image WHERE ImageID = @ImageID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetArticleListBySearchCriteria 
	@ModuleID	int,
	@CurrentDate datetime,
	@AgedDate datetime,
	@CategoryID	varchar(2000),
	@CategoryIDCount	int,
	@CategoryIDExclude	varchar(2000),
	@MaxCount int, 
	@PageNumber int, 
	@PageSize int,
	@SortBy varchar(50),
	@SortDirection varchar(50),
	@IsApproved	bit,
	@IsDraft	bit,
	@KeyWords	nvarchar(255), 
	@AuthorID	int,
	@ShowPending bit,
	@ShowExpired bit,
	@ShowFeaturedOnly bit,
	@ShowNotFeaturedOnly bit,
	@ShowSecuredOnly bit,
	@ShowNotSecuredOnly bit,
	@ArticleIDs	varchar(255), 
	@TagID varchar(2000),
	@TagIDCount int,  
	@RssGuid nvarchar(255)
AS

-- Form Where Query

DECLARE @strWhere	nvarchar(4000)
SELECT @strWhere = 'Article.ModuleID = ' + convert(nvarchar, @ModuleId)

IF( @CurrentDate is null )
	SELECT @CurrentDate = GetDate()

IF( @ShowPending is null )
BEGIN
	SELECT @strWhere = @strWhere + ' AND (Article.StartDate is null OR (Article.StartDate <= ''' + convert(nvarchar, @CurrentDate)  + ''' AND Article.StartDate <= GetDate()))'
	
	IF( @AgedDate is not null )
		SELECT @strWhere = @strWhere + ' AND Article.StartDate >= ''' + convert(nvarchar, @AgedDate)  + ''''
END
ELSE
BEGIN
	IF( @CurrentDate is not null AND @AgedDate is not null )
	BEGIN
		SELECT @strWhere = @strWhere + ' AND (Article.StartDate is null OR (Article.StartDate <= ''' + convert(nvarchar, @CurrentDate)  + '''))'
		
		IF( @AgedDate is not null )
			SELECT @strWhere = @strWhere + ' AND Article.StartDate >= ''' + convert(nvarchar, @AgedDate)  + ''''
	END
END

IF( @ShowExpired is null )
BEGIN
	SELECT @strWhere = @strWhere + ' AND (Article.EndDate is null OR Article.EndDate >= ''' + convert(nvarchar, @CurrentDate)  + ''')'
END

IF (@CategoryId is not null)
	if(@CategoryIDCount is not null)
		SELECT @strWhere = @strWhere + ' AND Article.ArticleID in ( select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories where {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.CategoryID in (' + @CategoryID + ') group by articleID having count(*) > ' + convert(nvarchar, @CategoryIDCount) + ')'
	else
		SELECT @strWhere = @strWhere + ' AND Article.ArticleID in ( select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories where {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.CategoryID in (' + @CategoryID + '))'

IF (@CategoryIDExclude is not null)
	SELECT @strWhere = @strWhere + ' AND Article.ArticleID not in ( select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories where {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories.CategoryID in (' + @CategoryIDExclude + '))'

IF (@AuthorID is not null)
	SELECT @strWhere = @strWhere + ' AND Article.AuthorID = ' + convert(nvarchar, @AuthorID)

IF (@IsApproved = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsApproved = 1'

IF (@IsApproved = 0 )
	SELECT @strWhere = @strWhere + ' AND Article.IsApproved = 0'

IF (@IsDraft = 0)
	SELECT @strWhere = @strWhere + ' AND Article.IsDraft = 0'

IF (@IsDraft = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsDraft = 1'

IF (@ShowFeaturedOnly = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsFeatured = 1'
	
IF (@ShowNotFeaturedOnly = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsFeatured = 0'

IF (@ShowSecuredOnly = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsSecure = 1'
	
IF (@ShowNotSecuredOnly = 1 )
	SELECT @strWhere = @strWhere + ' AND Article.IsSecure = 0'

IF (@Keywords is not null)
	SELECT @strWhere = @strWhere + ' AND (Article.Title LIKE N''%' + @Keywords + '%'' OR Article.Summary LIKE N''%' + @Keywords + '%'' OR ((select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page where Page.ArticleID = Article.ArticleID and Page.PageText LIKE N''%' + @Keywords + '%'') > 0))'

IF (@ArticleIDs is not null)
	SELECT @strWhere = @strWhere + ' AND Article.ArticleID in (' + @ArticleIDs + ')'
	
IF (@SortBy = 'Title') 
	SELECT @SortBy = 'Article.Title'

IF (@SortBy = 'IsFeatured DESC, Title') 
	SELECT @SortBy = 'IsFeatured DESC, Article.Title'

IF (@TagID is not null)
	if(@TagIDCount is not null)
		SELECT @strWhere = @strWhere + ' AND Article.ArticleID in ( select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag where {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag.TagID in (' + @TagID + ') group by articleID having count(*) > ' + convert(nvarchar, @TagIDCount) + ')'
	else
		SELECT @strWhere = @strWhere + ' AND Article.ArticleID in ( select ArticleID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag where {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag.ArticleID = Article.ArticleID and {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag.TagID in (' + @TagID + '))'

IF (@RssGuid is not null)
	SELECT @strWhere = @strWhere + ' AND Article.RssGuid = N''' + @RssGuid + ''''
	
-- Set Paging Options

IF( @PageNumber is null )
	SET @PageNumber = 1

IF( @PageSize is null )
	SET @PageSize = 100

SET @PageNumber = @PageNumber - 1

DECLARE @startRowIndex int
SET @startRowIndex = (@PageNumber * @PageSize)

DECLARE @maxRow int
SET @maxRow = (@startRowIndex + @PageSize)
IF( @MaxCount is not null )
BEGIN
	IF( @MaxCount < @MaxRow )
	BEGIN
		SET ROWCOUNT @MaxCount
	END
	ELSE
	BEGIN
		SET ROWCOUNT @maxRow
	END
END
ELSE
BEGIN
	SET ROWCOUNT @maxRow
END

-- Create Temporary Table

CREATE TABLE #TempItems 
(
   ID int IDENTITY,
   ArticleID int
)

EXEC('
INSERT INTO #TempItems (ArticleID) 
SELECT 
	Article.[ArticleID]
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article Article LEFT OUTER JOIN 
    {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page on Page.ArticleID = Article.ArticleID AND Page.SortOrder = 0 LEFT OUTER JOIN 
	{databaseOwner}{objectQualifier}Users Author ON Article.AuthorID = Author.UserID LEFT OUTER JOIN 
    {databaseOwner}{objectQualifier}Users Updated ON Article.LastUpdateID = Updated.UserID
WHERE ' + 
	@strWhere + '
ORDER BY 
	' + @SortBy + ' ' + @SortDirection)

SET ROWCOUNT 0

SELECT 
	Article.[ArticleID],
	Article.[AuthorID],
	Article.[ApproverID],
	Article.[CreatedDate],
	Article.[LastUpdate],
	Article.[Title],
	Article.[Summary],
	Article.[IsApproved],
	Article.[NumberOfViews],
	Article.[StartDate],
	Article.[EndDate],
	Article.[ModuleID],
	Article.[IsFeatured],
	Article.[ImageUrl],
	Article.[LastUpdateID],
	Article.[IsSecure],
	Article.[IsNewWindow],
	Article.[ImageUrl],
	Article.[Url],
	Article.[PageCount],
	Article.[CommentCount],
	Article.[Rating],
	Article.[RatingCount],
	Article.[ImageCount],
	Article.[MetaTitle],
	Article.[MetaDescription],
	Article.[MetaKeywords],
	Article.[PageHeadText], 
	Article.[ShortUrl],
	Article.[RssGuid], 
	Author.[Email] as AuthorEmail,
	Author.[UserName] as AuthorUserName,
	Author.[FirstName] as AuthorFirstName,
	Author.[LastName] as AuthorLastName,
	Author.[DisplayName] as AuthorDisplayName,
	Updated.[Email] as LastUpdateEmail,
	Updated.[UserName] as LastUpdateUserName,
	Updated.[FirstName] as LastUpdateFirstName,
	Updated.[LastName] as LastUpdateLastName,
	Updated.[DisplayName] as LastUpdateDisplayName,
	Page.PageText as 'Body',
	{databaseOwner}{objectQualifier}Ventrian_NewsArticles_SplitTags(Article.[ArticleID]) as 'Tags'   

FROM
	#TempItems t INNER JOIN 
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article Article ON t.ArticleID = Article.ArticleID LEFT OUTER JOIN 
    {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page on Page.ArticleID = Article.ArticleID AND Page.SortOrder = 0 LEFT OUTER JOIN 
	{databaseOwner}{objectQualifier}Users Author ON Article.AuthorID = Author.UserID LEFT OUTER JOIN 
    {databaseOwner}{objectQualifier}Users Updated ON Article.LastUpdateID = Updated.UserID

WHERE
	ID > @startRowIndex
	
ORDER BY
	ID

DROP TABLE #TempItems 

EXEC('
SELECT 
	COUNT(Article.ArticleID) as ''TotalRecords'' 
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article Article
WHERE ' + 
	@strWhere )
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Image(
	[ImageID] [int] IDENTITY(1,1) NOT NULL,
	[ArticleID] [int] NULL,
	[Title] [nvarchar](100) NULL,
	[FileName] [nvarchar](100) NULL,
	[Extension] [nvarchar](100) NULL,
	[Size] [int] NULL,
	[Width] [int] NULL,
	[Height] [int] NULL,
	[ContentType] [nvarchar](200) NULL,
	[Folder] [nvarchar](200) NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_{objectQualifier}DnnForge_NewsArticles_Image_SortOrder]  DEFAULT ((0)),
	[ImageGuid] [nvarchar](50) NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_Image] PRIMARY KEY CLUSTERED 
(
	[ImageID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplate(
	[TemplateID] [int] IDENTITY(1,1) NOT NULL,
	[ModuleID] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Subject] [nvarchar](255) NOT NULL,
	[Template] [ntext] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_EmailTemplate] PRIMARY KEY CLUSTERED 
(
	[TemplateID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Handout(
	[HandoutID] [int] IDENTITY(1,1) NOT NULL,
	[ModuleID] [int] NOT NULL,
	[UserID] [int] NULL,
	[Name] [nvarchar](255) NOT NULL,
	[Description] [ntext] NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_Handout] PRIMARY KEY CLUSTERED 
(
	[HandoutID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_HandoutArticle(
	[HandoutID] [int] NOT NULL,
	[ArticleID] [int] NOT NULL,
	[SortOrder] [int] NOT NULL
) ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag(
	[TagID] [int] IDENTITY(1,1) NOT NULL,
	[ModuleID] [int] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[NameLowered] [nvarchar](255) NOT NULL,
	[Usages] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_Tag] PRIMARY KEY CLUSTERED 
(
	[TagID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag(
	[ArticleID] [int] NOT NULL,
	[TagID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_ArticleTag] PRIMARY KEY CLUSTERED 
(
	[ArticleID] ASC,
	[TagID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category(
	[CategoryID] [int] IDENTITY(1,1) NOT NULL,
	[ModuleID] [int] NOT NULL,
	[Name] [nvarchar](255) NOT NULL,
	[Image] [nvarchar](255) NULL,
	[ParentID] [int] NULL,
	[Description] [ntext] NULL,
	[SortOrder] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_Category] PRIMARY KEY CLUSTERED 
(
	[CategoryID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article(
	[ArticleID] [int] IDENTITY(1,1) NOT NULL,
	[AuthorID] [int] NOT NULL,
	[ApproverID] [int] NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastUpdate] [datetime] NOT NULL,
	[Title] [nvarchar](255) NOT NULL,
	[IsApproved] [bit] NOT NULL,
	[NumberOfViews] [int] NOT NULL,
	[IsDraft] [bit] NOT NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[ModuleID] [int] NULL,
	[ImageUrl] [nvarchar](255) NULL,
	[IsFeatured] [bit] NOT NULL,
	[LastUpdateID] [int] NULL,
	[URL] [nvarchar](255) NULL,
	[IsSecure] [int] NOT NULL CONSTRAINT [DF_{objectQualifier}_DnnFo__IsSec__7E97B1A9]  DEFAULT ((0)),
	[IsNewWindow] [bit] NOT NULL CONSTRAINT [DF_{objectQualifier}DnnForge_NewsArticles_Article_IsNewWindow]  DEFAULT ((0)),
	[Summary] [ntext] NULL,
	[CommentCount] [int] NULL,
	[PageCount] [int] NULL,
	[Rating] [decimal](3, 2) NULL,
	[RatingCount] [int] NULL,
	[MetaTitle] [nvarchar](200) NULL,
	[MetaDescription] [nvarchar](500) NULL,
	[MetaKeywords] [nvarchar](500) NULL,
	[PageHeadText] [nvarchar](500) NULL,
	[ShortUrl] [nvarchar](50) NULL,
	[RssGuid] [nvarchar](255) NULL,
	[ImageCount] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_Article] PRIMARY KEY CLUSTERED 
(
	[ArticleID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories(
	[ArticleID] [int] NOT NULL,
	[CategoryID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_ArticleCategories] PRIMARY KEY CLUSTERED 
(
	[ArticleID] ASC,
	[CategoryID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page(
	[PageID] [int] IDENTITY(1,1) NOT NULL,
	[ArticleID] [int] NOT NULL,
	[Title] [nvarchar](255) NOT NULL,
	[PageText] [ntext] NOT NULL,
	[SortOrder] [int] NOT NULL CONSTRAINT [DF_{objectQualifier}DnnForge_NewsArticles_Page_SortOrder]  DEFAULT ((0)),
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_Page] PRIMARY KEY CLUSTERED 
(
	[PageID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment(
	[CommentID] [int] IDENTITY(1,1) NOT NULL,
	[ArticleID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[CreatedDate] [datetime] NOT NULL CONSTRAINT [DF_{objectQualifier}DnnForge_NewsArticles_Comment_CreatedDate]  DEFAULT (getdate()),
	[Comment] [ntext] NOT NULL,
	[RemoteAddress] [nvarchar](50) NULL,
	[Type] [int] NOT NULL DEFAULT ((0)),
	[TrackbackUrl] [nvarchar](255) NULL,
	[TrackbackTitle] [nvarchar](255) NULL,
	[TrackbackBlogName] [nvarchar](255) NULL,
	[TrackbackExcerpt] [ntext] NULL,
	[AnonymousName] [nvarchar](255) NULL,
	[AnonymousEmail] [nvarchar](255) NULL,
	[AnonymousURL] [nvarchar](255) NULL,
	[NotifyMe] [bit] NOT NULL CONSTRAINT [DF_{objectQualifier}DnnForge_NewsArticles_Comment_NotifyMe]  DEFAULT ((0)),
	[isApproved] [bit] NOT NULL CONSTRAINT [DF_{objectQualifier}DnnForge_NewsArticles_Comment_isApproved]  DEFAULT ((1)),
	[approvedBy] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}DnnForge_NewsArticles_Comment] PRIMARY KEY CLUSTERED 
(
	[CommentID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetPageList 
	@ArticleID int
AS

SELECT
	[PageID],
	[ArticleID],
	[Title], 
	[PageText],
	[SortOrder]
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page

WHERE
	[ArticleID] = @ArticleID

ORDER BY
	[SortOrder] ASC
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetPage
	@PageID int
AS

SELECT
	[PageID],
	[ArticleID],
	[Title], 
	[PageText],
	[SortOrder]
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page
WHERE
	[PageID] = @PageID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_UpdateArticle
	@ArticleID int, 
	@AuthorID int, 
	@ApproverID int, 
	@CreatedDate datetime, 
	@LastUpdate datetime, 
	@Title nvarchar(255), 
	@Summary ntext, 
	@IsApproved bit, 
	@NumberOfViews int, 
	@IsDraft bit,
	@StartDate DateTime,
	@EndDate DateTime,
	@ModuleID int,
	@ImageUrl nvarchar(255),
	@IsFeatured bit, 
	@LastUpdateID int, 
	@Url nvarchar(255),
	@IsSecure bit,
	@IsNewWindow bit,
	@MetaTitle nvarchar(200),
	@MetaDescription nvarchar(500),
	@MetaKeywords nvarchar(500),
	@PageHeadText nvarchar(500),
	@ShortUrl nvarchar(50),
	@RssGuid nvarchar(255)    
AS

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article SET
	[AuthorID] = @AuthorID,
	[ApproverID] = @ApproverID,
	[CreatedDate] = @CreatedDate,
	[LastUpdate] = @LastUpdate,
	[Title] = @Title,
	[Summary] = @Summary,
	[IsApproved] = @IsApproved,
	[NumberOfViews] = @NumberOfViews,
	[IsDraft] = @IsDraft,
	[StartDate] = @StartDate,
	[EndDate] = @EndDate,
	[ModuleID] = @ModuleID,
	[ImageUrl] = @ImageUrl,
	[IsFeatured] = @IsFeatured, 
	[LastUpdateID] = @LastUpdateID, 
	[Url] = @Url,
	[IsSecure] = @IsSecure,
	[IsNewWindow] = @IsNewWindow,
	[MetaTitle] = @MetaTitle,
	[MetaDescription] = @MetaDescription,
	[MetaKeywords] = @MetaKeywords,
	[PageHeadText] = @PageHeadText,
	[ShortUrl] = @ShortUrl,
	[RssGuid] = @RssGuid      
WHERE
	[ArticleID] = @ArticleID

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [PageCount] = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page where Page.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE ArticleID = @ArticleID

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [CommentCount] = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment Comment where Comment.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID and Comment.IsApproved = 1)
WHERE ArticleID = @ArticleID

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [Rating] = (select AVG(rating) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating Rating where Rating.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE [ArticleID] = @ArticleID

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [RatingCount] = (select COUNT(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating Rating where Rating.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE [ArticleID] = @ArticleID

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [ImageCount] = (select COUNT(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Image i where i.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE [ArticleID] = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_AddArticle 
	@AuthorID int,
	@ApproverID int,
	@CreatedDate datetime,
	@LastUpdate datetime,
	@Title nvarchar(255),
	@Summary ntext,
	@IsApproved bit,
	@NumberOfViews int,
	@IsDraft bit,
	@StartDate DateTime,
	@EndDate DateTime,
	@ModuleID int,
	@ImageUrl nvarchar(255),
	@IsFeatured bit, 
	@LastUpdateID int, 
	@Url nvarchar(255),
	@IsSecure bit,
	@IsNewWindow bit,
	@MetaTitle nvarchar(200),
	@MetaDescription nvarchar(500),
	@MetaKeywords nvarchar(500),
	@PageHeadText nvarchar(500), 
	@ShortUrl nvarchar(50),
	@RssGuid nvarchar(255) 
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article (
	[AuthorID],
	[ApproverID],
	[CreatedDate],
	[LastUpdate],
	[Title],
	[Summary],
	[IsApproved],
	[NumberOfViews],
	[IsDraft],
	[StartDate],
	[EndDate],
	[ModuleID],
	[ImageUrl],
	[IsFeatured], 
	[LastUpdateID], 
	[Url],
	[IsSecure],
	[IsNewWindow],
	[MetaTitle],
	[MetaDescription],
	[MetaKeywords],
	[PageHeadText],
	[ShortUrl],
	[RssGuid]  
) VALUES (
	@AuthorID,
	@ApproverID,
	@CreatedDate,
	@LastUpdate,
	@Title,
	@Summary,
	@IsApproved,
	@NumberOfViews,
	@IsDraft,
	@StartDate,
	@EndDate,
	@ModuleID,
	@ImageUrl,
	@IsFeatured,
	@LastUpdateID,
	@Url,
	@IsSecure,
	@IsNewWindow,
	@MetaTitle,
	@MetaDescription,
	@MetaKeywords,
	@PageHeadText,
	@ShortUrl,
	@RssGuid      
)

select SCOPE_IDENTITY()

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [PageCount] = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page where Page.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE ArticleID = SCOPE_IDENTITY()

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [CommentCount] = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment Comment where Comment.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID and Comment.IsApproved = 1)
WHERE ArticleID = SCOPE_IDENTITY()

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [Rating] = (select AVG(rating) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating Rating where Rating.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE [ArticleID] = SCOPE_IDENTITY() 

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [RatingCount] = (select COUNT(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating Rating where Rating.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE [ArticleID] = SCOPE_IDENTITY() 

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [ImageCount] = (select COUNT(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Image i where i.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE [ArticleID] = SCOPE_IDENTITY()
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_AddPage
	@ArticleID int,
	@Title nvarchar(255), 
	@PageText ntext,
	@SortOrder int
AS

declare @count int

select @count = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page where ArticleID = @ArticleID)

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page (
	[ArticleID],
	[Title],
	[PageText],
	[SortOrder]
) VALUES (
	@ArticleID,
	@Title,
	@PageText,
	@count
)

select SCOPE_IDENTITY()

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [PageCount] = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page where Page.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE ArticleID = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_DeletePage 
	@PageID int
AS

DECLARE @ArticleID int
SELECT @ArticleID = ArticleID FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page WHERE [PageID] = @PageID

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page
WHERE
	[PageID] = @PageID

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [PageCount] = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page where Page.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE ArticleID = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_UpdatePage
	@PageID int, 
	@ArticleID int, 
	@Title nvarchar(255), 
	@PageText ntext, 
	@SortOrder int 
AS

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page SET
	[ArticleID] = @ArticleID,
	[Title] = @Title, 
	[PageText] = @PageText,
	[SortOrder] = @SortOrder
WHERE
	[PageID] = @PageID

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [PageCount] = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page where Page.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE ArticleID = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedAdd
	@ModuleID int,
	@Title nvarchar(255),
	@Url nvarchar(255),
	@UserID int,
	@AutoFeature bit,
	@IsActive bit,
	@DateMode int,
	@AutoExpire int,
	@AutoExpireUnit int
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Feed (
	[ModuleID],
	[Title],
	[Url],
	[UserID],
	[AutoFeature],
	[IsActive],
	[DateMode],
	[AutoExpire],
	[AutoExpireUnit]  
) VALUES (
	@ModuleID,
	@Title,
	@Url,
	@UserID,
	@AutoFeature,
	@IsActive,
	@DateMode,
	@AutoExpire,
	@AutoExpireUnit 
)

select SCOPE_IDENTITY()
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedGet 
	@FeedID int
AS

SELECT     
	FeedID, 
	ModuleID, 
	Title, 
	Url, 
	UserID, 
	AutoFeature, 
	IsActive,
	DateMode,
	AutoExpire,
	AutoExpireUnit  
FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Feed
WHERE
	FeedID = @FeedID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedList 
	@ModuleID int, 
	@ShowActiveOnly bit 
AS

SELECT     
	FeedID, 
	ModuleID, 
	Title, 
	Url, 
	UserID, 
	AutoFeature, 
	IsActive,
	DateMode,
	AutoExpire,
	AutoExpireUnit  
FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Feed
WHERE
	(@ModuleID = -1 OR ModuleID = @ModuleID) 
	AND 
	(@ShowActiveOnly = 0 OR IsActive = 1)
ORDER BY 
	Title
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedUpdate 
	@FeedID int, 
	@ModuleID int,
	@Title nvarchar(255),
	@Url nvarchar(255),
	@UserID int,
	@AutoFeature bit,
	@IsActive bit,
	@DateMode int,
	@AutoExpire int,
	@AutoExpireUnit int
AS

UPDATE
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Feed 
SET 
	[ModuleID] = @ModuleID,
	[Title] = @Title,
	[Url] = @Url, 
	[UserID] = @UserID, 
	[AutoFeature] = @AutoFeature, 
	[IsActive] = @IsActive,
	[DateMode] = @DateMode,
	[AutoExpire] = @AutoExpire,
	[AutoExpireUnit] = @AutoExpireUnit  
WHERE
	[FeedID] = @FeedID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedDelete 
	@FeedID int
AS

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Feed
WHERE
	[FeedID] = @FeedID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedCategoryList 
	@FeedID int
AS

SELECT     
	c.[CategoryID],
	c.[ParentID], 
	c.[ModuleID],
	c.[Name],
	c.[Image],
	c.[Description],
	c.[SortOrder] 
FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedCategory fc INNER JOIN
		{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category c ON fc.categoryID = c.categoryID 
WHERE
	fc.FeedID = @FeedID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedCategoryAdd 
	@FeedID int,
	@CategoryID int 
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedCategory(FeedID, CategoryID)
	VALUES(@FeedID, @CategoryID)
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedCategoryDelete 
	@FeedID int
AS

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_FeedCategory
WHERE FeedID = @FeedID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_RatingGet 
	@ArticleID int, 
	@UserID int
	
AS

SELECT
	[RatingID],
	[ArticleID],
	[UserID],
	[CreatedDate],
	[Rating]
FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating
WHERE
	[ArticleID] = @ArticleID
	and
	[UserID] = @UserID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_RatingGetByID 
	@RatingID int
	
AS

SELECT
	[RatingID],
	[ArticleID],
	[UserID],
	[CreatedDate],
	[Rating]
FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating
WHERE
	[RatingID] = @RatingID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_RatingAdd 
	@ArticleID int,
	@UserID int,
	@CreatedDate datetime,
	@Rating float
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating (
	[ArticleID],
	[UserID],
	[CreatedDate],
	[Rating]
) VALUES (
	@ArticleID,
	@UserID,
	@CreatedDate,
	@Rating
)

select SCOPE_IDENTITY()

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [Rating] = (select AVG(rating) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating Rating where Rating.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE [ArticleID] = @ArticleID 

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [Rating] = (select AVG(rating) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating Rating where Rating.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE [ArticleID] = @ArticleID 

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [RatingCount] = (select COUNT(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating Rating where Rating.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE [ArticleID] = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_RatingDelete 
	@RatingID int
AS

DECLARE @ArticleID int
SELECT @ArticleID = ArticleID FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating WHERE [RatingID] = @RatingID

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating
WHERE [RatingID] = @RatingID

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [Rating] = (select AVG(rating) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating Rating where Rating.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE [ArticleID] = @ArticleID 

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [RatingCount] = (select COUNT(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Rating Rating where Rating.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID)
WHERE [ArticleID] = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_DeleteCategory 
	@CategoryID int
AS

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories
WHERE
	[CategoryID] = @CategoryID

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category
WHERE
	[CategoryID] = @CategoryID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_DeleteArticle 
	@ArticleID int
AS

DELETE FROM 
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomValue
WHERE
	[ArticleID] = @ArticleID

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories
WHERE
	[ArticleID] = @ArticleID

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
WHERE
	[ArticleID] = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_DeleteArticleCategories 
	@ArticleID int
AS

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories
WHERE
	[ArticleID] = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_AddArticleCategory 
	@ArticleID int,
	@CategoryID int
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories( ArticleID, CategoryID )
VALUES (@ArticleID, @CategoryID)
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetArticleCategories 
	@ArticleID int
AS

SELECT      
	Category.CategoryID, 
    Category.[Name]
FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories ArticleCategories, {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category Category

WHERE
	ArticleCategories.CategoryID = Category.CategoryID
	AND
	ArticleCategories.ArticleID = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_DeleteCustomField 
	@CustomFieldID int
AS

DELETE FROM 
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomValue
WHERE
	CustomFieldID = @CustomFieldID

DELETE FROM 
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomField
WHERE
	CustomFieldID = @CustomFieldID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetCustomFieldList 
      @ModuleID int
AS

SELECT     
      CustomFieldID, 
      ModuleID, 
      [Name], 
      FieldType, 
      FieldElements, 
      DefaultValue, 
      Caption, 
      CaptionHelp, 
      IsRequired, 
      IsVisible, 
      SortOrder, 
      ValidationType, 
    RegularExpression, 
      [Length]
FROM         
      {databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomField
WHERE
      [ModuleID] = @ModuleID
ORDER BY
	SortOrder
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_UpdateCustomField 
	@CustomFieldID int,
	@ModuleID int,
	@Name nvarchar(255),
	@FieldType int,
	@FieldElements ntext,
	@DefaultValue nvarchar(255),
	@Caption nvarchar(255),
	@CaptionHelp nvarchar(255),
	@IsRequired bit,
	@IsVisible bit,
	@SortOrder int,
	@ValidationType int, 
	@Length int,
	@RegularExpression nvarchar(4000)
AS

UPDATE
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomField
SET
	[ModuleID] = @ModuleID,
	[Name] = @Name,
	[FieldType] = @FieldType,
	[FieldElements] = @FieldElements,
	[DefaultValue] = @DefaultValue,
	[Caption] = @Caption,
	[CaptionHelp] = @CaptionHelp,
	[IsRequired] = @IsRequired,
	[IsVisible] = @IsVisible,
	[SortOrder] = @SortOrder,
	[ValidationType] = @ValidationType,
	[Length] = @Length,
	[RegularExpression] = @RegularExpression
WHERE
	CustomFieldID = @CustomFieldID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_AddCustomField 
	@ModuleID int,
	@Name nvarchar(255),
	@FieldType int,
	@FieldElements ntext,
	@DefaultValue nvarchar(255),
	@Caption nvarchar(255),
	@CaptionHelp nvarchar(255),
	@IsRequired bit,
	@IsVisible bit,
	@SortOrder int,
	@ValidationType int, 
	@Length int,
	@RegularExpression nvarchar(4000)
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomField (
	[ModuleID],
	[Name],
	[FieldType],
	[FieldElements],
	[DefaultValue],
	[Caption],
	[CaptionHelp],
	[IsRequired],
	[IsVisible],
	[SortOrder],
	[ValidationType],
	[Length],
	[RegularExpression]
) VALUES (
	@ModuleID,
	@Name,
	@FieldType,
	@FieldElements,
	@DefaultValue,
	@Caption,
	@CaptionHelp,
	@IsRequired,
	@IsVisible,
	@SortOrder,
	@ValidationType,
	@Length,
	@RegularExpression
)

select SCOPE_IDENTITY()
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetCustomField 
      @CustomFieldID int
AS

SELECT     
      CustomFieldID, 
      ModuleID, 
      [Name], 
      FieldType, 
      FieldElements, 
      DefaultValue, 
      Caption, 
      CaptionHelp, 
      IsRequired, 
      IsVisible, 
      SortOrder, 
      ValidationType, 
    RegularExpression, 
      [Length]
FROM         
      {databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomField
WHERE
      [CustomFieldID] = @CustomFieldID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_AddCustomValue 
	@ArticleID int,
	@CustomFieldID int,
	@CustomValue ntext
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomValue (
	[ArticleID],
	[CustomFieldID],
	[CustomValue]
) VALUES (
	@ArticleID,
	@CustomFieldID,
	@CustomValue
)

select SCOPE_IDENTITY()
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_UpdateCustomValue 
	@CustomValueID int, 
	@ArticleID int, 
	@CustomFieldID int, 
	@CustomValue ntext 
AS

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomValue SET
	[ArticleID] = @ArticleID,
	[CustomFieldID] = @CustomFieldID,
	[CustomValue] = @CustomValue
WHERE
	[CustomValueID] = @CustomValueID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetCustomValueByField 
	@ArticleID int,
	@CustomFieldID int
AS

SELECT
	[CustomValueID],
	[ArticleID],
	[CustomFieldID],
	[CustomValue]
FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomValue
WHERE
	[ArticleID] = @ArticleID
	and
	[CustomFieldID] = @CustomFieldID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetCustomValueList 
	@ArticleID int
AS

SELECT
	[CustomValueID],
	[ArticleID],
	[CustomFieldID],
	[CustomValue]
FROM 
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomValue
WHERE
	[ArticleID] = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_DeleteCustomValue 
	@CustomValueID int
AS

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_CustomValue
WHERE
	[CustomValueID] = @CustomValueID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplateGet 
	@TemplateID int
AS

SELECT
	[TemplateID],
	[ModuleID],
	[Name],
	[Subject],
	[Template]
FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplate
WHERE
	[TemplateID] = @TemplateID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplateList 
	@ModuleID int
AS

SELECT
	[TemplateID],
	[ModuleID],
	[Name],
	[Subject],
	[Template]
FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplate
WHERE
	[ModuleID] = @ModuleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplateUpdate 
	@TemplateID int, 
	@ModuleID int, 
	@Name nvarchar(50), 
	@Subject nvarchar(255), 
	@Template ntext 
AS

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplate SET
	[ModuleID] = @ModuleID,
	[Name] = @Name,
	[Subject] = @Subject,
	[Template] = @Template
WHERE
	[TemplateID] = @TemplateID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplateAdd 
	@ModuleID int,
	@Name nvarchar(50),
	@Subject nvarchar(255),
	@Template ntext
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplate (
	[ModuleID],
	[Name],
	[Subject],
	[Template]
) VALUES (
	@ModuleID,
	@Name,
	@Subject,
	@Template
)

select SCOPE_IDENTITY()
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplateDelete 
	@TemplateID int
AS

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplate
WHERE
	[TemplateID] = @TemplateID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplateGetByName 
	@ModuleID int, 
	@Name nvarchar(50)
AS

SELECT
	[TemplateID],
	[ModuleID],
	[Name],
	[Subject],
	[Template]
FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_EmailTemplate
WHERE
	[ModuleID] = @ModuleID
	and
	[Name] = @Name
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_DeleteHandout 
	@HandoutID int
AS

DELETE FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Handout
WHERE
	HandoutID = @HandoutID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetHandout 
	@HandoutID int
AS

SELECT     
	[HandoutID], 
	[ModuleID], 
	[UserID], 
	[Name], 
	[Description]
FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Handout
WHERE
	HandoutID = @HandoutID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetHandoutList 
	@UserID int
AS

SELECT     
	[HandoutID], 
	[ModuleID], 
	[UserID], 
	[Name], 
	[Description]
FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Handout
WHERE
	[UserID] = @UserID
ORDER BY
	[Name]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_UpdateHandout 
	@HandoutID int,
	@ModuleID int,
	@UserID int,
	@Name nvarchar(255),
	@Description ntext
AS

UPDATE
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Handout
SET
	[ModuleID] = @ModuleID,
	[UserID] = @UserID,
	[Name] = @Name,
	[Description] = @Description
WHERE
	HandoutID = @HandoutID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_AddHandout 
	@ModuleID int,
	@UserID int,
	@Name nvarchar(255),
	@Description ntext
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Handout (
	[ModuleID],
	[UserID],
	[Name],
	[Description]
) VALUES (
	@ModuleID,
	@UserID,
	@Name,
	@Description
)

select SCOPE_IDENTITY()
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetHandoutArticleList 
	@HandoutID int
AS

SELECT     
	[HandoutID], 
	[ArticleID],
	[SortOrder]
FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_HandoutArticle
WHERE
	HandoutID = @HandoutID
ORDER BY 
	[SortOrder] ASC
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_DeleteHandoutArticleList 
	@HandoutID int
AS

DELETE FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_HandoutArticle
WHERE
	HandoutID = @HandoutID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_AddHandoutArticle 
	@HandoutID int,
	@ArticleID int,
	@SortOrder int
AS

INSERT INTO
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_HandoutArticle(HandoutID, ArticleID, SortOrder)
VALUES
	(@HandoutID, @ArticleID, @SortOrder)
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetCategory 
	@CategoryID int
AS

SELECT
	[CategoryID],
	[ParentID], 
	[ModuleID],
	[Name],
	[Image],
	[Description],
	[SortOrder] 
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category
WHERE
	[CategoryID] = @CategoryID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetCategoryList 
	@ModuleID int,
	@ParentID int 
AS

SELECT
	[CategoryID],
	[ParentID],
	[ModuleID],
	[Name],
	[Image],
	[Description],
	[SortOrder] 
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category
WHERE
	[ModuleID] = @ModuleID
	AND
	[ParentID] = @ParentID
ORDER BY 
	[SortOrder], [Name]
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_AddCategory 
	@ModuleID int,
	@ParentID int,
	@Name nvarchar(255),
	@Image nvarchar(255),
	@Description ntext,
	@SortOrder int 
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category (
	[ModuleID],
	[ParentID],
	[Name],
	[Image],
	[Description],
	[SortOrder]
) VALUES (
	@ModuleID,
	@ParentID,
	@Name,
	@Image,
	@Description,
	@SortOrder
)

select SCOPE_IDENTITY()
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_UpdateCategory 
	@CategoryID int, 
	@ModuleID int, 
	@ParentID int, 
	@Name nvarchar(255), 
	@Image nvarchar(255),
	@Description ntext,
	@SortOrder int 
AS

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category SET
	[ModuleID] = @ModuleID,
	[ParentID] = @ParentID, 
	[Name] = @Name,
	[Image] = @Image,
	[Description] = @Description,
	[SortOrder] = @SortOrder
WHERE
	[CategoryID] = @CategoryID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetComment 
	@CommentID int
AS

SELECT
	Comment.[CommentID],
	Comment.[ArticleID],
	Comment.[UserID], 
	Comment.[CreatedDate],
	Comment.[Comment],
	Comment.[RemoteAddress],
	Comment.[Type],
	Comment.[TrackbackUrl],
	Comment.[TrackbackTitle],
	Comment.[TrackbackBlogName],
	Comment.[TrackbackExcerpt], 
	Comment.[AnonymousName], 
	Comment.[AnonymousEmail], 
	Comment.[AnonymousURL], 
	Comment.[NotifyMe], 
	Comment.[IsApproved],  
	Comment.[ApprovedBy],  
	Author.[Email] as AuthorEmail,
	Author.[UserName] as AuthorUserName,
	Author.[FirstName] as AuthorFirstName,
	Author.[LastName] as AuthorLastName,
	Author.[DisplayName] as AuthorDisplayName
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment Comment LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}Users Author ON Comment.UserID = Author.UserID
WHERE
	[CommentID] = @CommentID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetCommentList 
	@ModuleID	int,
	@ArticleID	int,
	@IsApproved bit 
AS

SELECT
	Comment.[CommentID],
	Comment.[ArticleID],
	Comment.[UserID], 
	Comment.[CreatedDate],
	Comment.[Comment],
	Comment.[RemoteAddress],
	Comment.[Type],
	Comment.[TrackbackUrl],
	Comment.[TrackbackTitle],
	Comment.[TrackbackBlogName],
	Comment.[TrackbackExcerpt], 
	Comment.[AnonymousName], 
	Comment.[AnonymousEmail], 
	Comment.[AnonymousURL],
	Comment.[NotifyMe],  
	Comment.[IsApproved],  
	Comment.[ApprovedBy],  
	Author.[Email] as AuthorEmail,
	Author.[UserName] as AuthorUserName,
	Author.[FirstName] as AuthorFirstName,
	Author.[LastName] as AuthorLastName,
	Author.[DisplayName] as AuthorDisplayName
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment Comment INNER JOIN
		{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article Article on Comment.ArticleID = Article.ArticleID LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}Users Author ON Comment.UserID = Author.UserID
WHERE
	Article.ModuleID = @ModuleID
	and
	(@ArticleID is null OR Comment.[ArticleID] = @ArticleID)
	and
	Comment.IsApproved = @IsApproved
ORDER BY
	Comment.[CreatedDate] ASC
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_AddComment 
	@ArticleID int,
	@UserID int, 
	@Comment ntext,
	@RemoteAddress nvarchar(50) ,
	@Type int,
	@TrackbackUrl nvarchar(255),
	@TrackbackTitle nvarchar(255),
	@TrackbackBlogName nvarchar(255),
	@TrackbackExcerpt ntext,
	@AnonymousName nvarchar(255),
	@AnonymousEmail nvarchar(255),
	@AnonymousURL nvarchar(255),
	@NotifyMe bit,
	@IsApproved bit,
	@ApprovedBy int
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment (
	[ArticleID],
	[UserID], 
	[Comment],
	[RemoteAddress],
	[Type],
	[TrackbackUrl],
	[TrackbackTitle],
	[TrackbackBlogName],
	[TrackbackExcerpt],
	[AnonymousName], 
	[AnonymousEmail],
	[AnonymousURL],
	[NotifyMe],
	[IsApproved],
	[ApprovedBy]
) VALUES (
	@ArticleID,
	@UserID, 
	@Comment,
	@RemoteAddress,
	@Type,
	@TrackbackUrl,
	@TrackbackTitle,
	@TrackbackBlogName,
	@TrackbackExcerpt,
	@AnonymousName,
	@AnonymousEmail,
	@AnonymousURL,
	@NotifyMe,
	@IsApproved,
	@ApprovedBy  
)

select SCOPE_IDENTITY()

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [CommentCount] = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment Comment where Comment.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID and Comment.IsApproved = 1)
WHERE ArticleID = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_UpdateComment 
	@CommentID int, 
	@ArticleID int, 
	@UserID int, 
	@Comment ntext,
	@RemoteAddress nvarchar(50),
 	@Type int,
	@TrackbackUrl nvarchar(255),
	@TrackbackTitle nvarchar(255),
	@TrackbackBlogName nvarchar(255),
	@TrackbackExcerpt ntext,
	@AnonymousName nvarchar(255),
	@AnonymousEmail nvarchar(255),
	@AnonymousURL nvarchar(255),
	@NotifyMe bit,
	@IsApproved bit,
	@ApprovedBy int 
AS

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment SET
	[ArticleID] = @ArticleID,
	[UserID] = @UserID, 
	[Comment] = @Comment,
	[RemoteAddress] = @RemoteAddress,
	[Type] = @Type,
	[TrackbackUrl] = @TrackbackUrl,
	[TrackbackTitle] = @TrackbackTitle,
	[TrackbackBlogName] = @TrackbackBlogName,
	[TrackbackExcerpt] = @TrackbackExcerpt,
	[AnonymousName] = @AnonymousName,
	[AnonymousEmail] = @AnonymousEmail,
	[AnonymousURL] = @AnonymousURL,
	[NotifyMe] = @NotifyMe,
	[IsApproved] = @IsApproved,
	[ApprovedBy] = @ApprovedBy 
WHERE
	[CommentID] = @CommentID

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [CommentCount] = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment Comment where Comment.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID and Comment.IsApproved = 1)
WHERE ArticleID = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_DeleteComment 
	@CommentID int
AS

DECLARE @ArticleID int
SELECT @ArticleID = ArticleID FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment WHERE [CommentID] = @CommentID

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment
WHERE [CommentID] = @CommentID

UPDATE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article
SET [CommentCount] = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment Comment where Comment.ArticleID = {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article.ArticleID and Comment.IsApproved = 1)
WHERE ArticleID = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagAdd 
	@ModuleID int,
	@Name nvarchar(50),
	@NameLowered nvarchar(50)
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag (
	[ModuleID],
	[Name],
	[NameLowered]
) VALUES (
	@ModuleID,
	@Name,
	@NameLowered 
)

select SCOPE_IDENTITY()
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagGet 
	@TagID int 
AS

SELECT
	[TagID],
	[ModuleID],
	[Name],
	[NameLowered],
	[Usages] 
FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag
WHERE
	[TagID] = @TagID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagGetByName 
	@ModuleID int,
	@NameLowered nvarchar(50) 
AS

SELECT TOP 1 
	[TagID],
	[ModuleID],
	[Name],
	[NameLowered],
	[Usages] 
FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag
WHERE
	[ModuleID] = @ModuleID
	and
	[NameLowered] = @NameLowered
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagList 
	@ModuleID int,
	@MaxCount int 
AS

if( @MaxCount is not null )
begin
	SET ROWCOUNT @MaxCount 
end

SELECT
	t.[TagID],
	t.[ModuleID],
	t.[Name],
	t.[NameLowered],
	t.[Usages] 
FROM 
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag t
WHERE
	t.[ModuleID] = @ModuleID
ORDER BY 
	t.[Usages] DESC
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagUpdate 
	@TagID int, 
	@ModuleID int,
	@Name nvarchar(50),
	@NameLowered nvarchar(50), 
	@Usages int 
AS

UPDATE
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag 
SET 
	[ModuleID] = @ModuleID,
	[Name] = @Name,
	[NameLowered] = @NameLowered, 
	[Usages] = @Usages 
WHERE
	[TagID] = @TagID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTagAdd 
	@ArticleID int,
	@TagID int 
AS

IF( (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag WHERE ArticleID = @ArticleID and TagID = @TagID) = 0 )
BEGIN
	INSERT INTO 
		{databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag(ArticleID, TagID)
	VALUES(@ArticleID, @TagID) 

	UPDATE
		{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag
	SET
		Usages = (select count(*) from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag pt where pt.TagID = @TagID) 
	WHERE
		TagID = @TagID
END
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTagDelete 
	@ArticleID int 
AS

UPDATE 
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag 
SET
	Usages = Usages - 1
WHERE
	TagID in (SELECT pt.TagID from {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag pt where ArticleID = @ArticleID)

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag 
WHERE Usages = 0

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag 
WHERE ArticleID = @ArticleID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTagDeleteByTag 
	@TagID int 
AS

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag 
WHERE TagID = @TagID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetAuthorList 
	@ModuleID int
AS

SELECT DISTINCT 
	Authors.UserID, 
	Authors.Username, 
	Authors.FirstName, 
	Authors.LastName,
	Authors.DisplayName 

FROM         
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article Articles, {databaseOwner}{objectQualifier}Users Authors

WHERE
	Articles.AuthorID = Authors.UserID
	and
	Articles.ModuleID = @ModuleID
	and 
	Articles.IsApproved = 1

ORDER BY
	Authors.FirstName, Authors.LastName
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_TagDelete 
	@TagID int
AS

exec {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTagDeleteByTag @TagID

DELETE FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag
WHERE
	[TagID] = @TagID
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_GetArticle 
	@ArticleID int
AS
SELECT
	Article.[ArticleID],
	Article.[AuthorID],
	Article.[ApproverID],
	Article.[CreatedDate],
	Article.[LastUpdate],
	Article.[Title],
	Article.[Summary],
	Article.[IsApproved],
	Article.[NumberOfViews],
	Article.[IsDraft],
	Article.[StartDate],
	Article.[EndDate],
	Article.[ModuleID],
	Article.[IsFeatured],
	Article.[ImageUrl],
	Article.[LastUpdateID],
	Article.[IsSecure],
	Article.[IsNewWindow],
	Article.[ImageUrl],
	Article.[Url],
	Article.[PageCount],
	Article.[CommentCount],
	Article.[Rating],
	Article.[RatingCount],
	Article.[ImageCount],
	Article.[MetaTitle],
	Article.[MetaDescription],
	Article.[MetaKeywords],
	Article.[PageHeadText], 
	Article.[ShortUrl],
	Article.[RssGuid], 
	Author.[Email] as AuthorEmail,
	Author.[UserName] as AuthorUserName,
	Author.[FirstName] as AuthorFirstName,
	Author.[LastName] as AuthorLastName,
	Author.[DisplayName] as AuthorDisplayName,
	Updated.[Email] as LastUpdateEmail,
	Updated.[UserName] as LastUpdateUserName,
	Updated.[FirstName] as LastUpdateFirstName,
	Updated.[LastName] as LastUpdateLastName,
	Updated.[DisplayName] as UpdatedDisplayName,
	Page.PageText as 'Body',
	{databaseOwner}{objectQualifier}Ventrian_NewsArticles_SplitTags(Article.[ArticleID]) as 'Tags'   
FROM
	{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article Article LEFT OUTER JOIN 
		{databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page Page on Page.ArticleID = Article.ArticleID AND Page.SortOrder = 0 LEFT OUTER JOIN 
		{databaseOwner}{objectQualifier}Users Author ON Article.AuthorID = Author.UserID LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}Users Updated ON Article.LastUpdateID = Updated.UserID

WHERE	
	Article.[ArticleID] = @ArticleID
GO

ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article WITH NOCHECK ADD CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_Article_Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}{objectQualifier}Modules ([ModuleID])
ON DELETE CASCADE
NOT FOR REPLICATION
GO
ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article CHECK CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_Article_Modules]
GO

ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories WITH NOCHECK ADD CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_ArticleCategories_{objectQualifier}DnnForge_NewsArticles_Article] FOREIGN KEY([ArticleID])
REFERENCES {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article ([ArticleID])
ON DELETE CASCADE
NOT FOR REPLICATION
GO
ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories CHECK CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_ArticleCategories_{objectQualifier}DnnForge_NewsArticles_Article]
GO

ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_ArticleCategories_{objectQualifier}DnnForge_NewsArticles_Category] FOREIGN KEY([CategoryID])
REFERENCES {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category ([CategoryID])
NOT FOR REPLICATION
GO
ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleCategories CHECK CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_ArticleCategories_{objectQualifier}DnnForge_NewsArticles_Category]
GO

ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_Category_Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}{objectQualifier}Modules ([ModuleID])
ON DELETE CASCADE
NOT FOR REPLICATION
GO
ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Category CHECK CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_Category_Modules]
GO

ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_Comment_{objectQualifier}DnnForge_NewsArticles_Article] FOREIGN KEY([ArticleID])
REFERENCES {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article ([ArticleID])
ON DELETE CASCADE
NOT FOR REPLICATION
GO
ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Comment CHECK CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_Comment_{objectQualifier}DnnForge_NewsArticles_Article]
GO

ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page WITH NOCHECK ADD CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_Page_{objectQualifier}DnnForge_NewsArticles_Article] FOREIGN KEY([ArticleID])
REFERENCES {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Article ([ArticleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Page CHECK CONSTRAINT [FK_{objectQualifier}DnnForge_NewsArticles_Page_{objectQualifier}DnnForge_NewsArticles_Article]
GO

CREATE FUNCTION {databaseOwner}{objectQualifier}Ventrian_NewsArticles_SplitTags
(@ArticleID int)
RETURNS nvarchar(2000)
AS
    BEGIN
 
    DECLARE @p_str nvarchar(2000)
    SET @p_str = ''

    SELECT @p_str = @p_str + ',' + CAST(t.[Name] AS NVARCHAR(50))
      FROM {databaseOwner}{objectQualifier}DnnForge_NewsArticles_Tag t, {databaseOwner}{objectQualifier}DnnForge_NewsArticles_ArticleTag at
     WHERE t.TagID = at.TagID and at.ArticleID = @ArticleID
     
    IF( LEN(@p_str) > 0 ) 
	BEGIN
		SELECT @p_str = SUBSTRING(@p_str, 2, (LEN(@p_str)-1)) 
	END

    RETURN LTRIM(@p_str)

END
GO
