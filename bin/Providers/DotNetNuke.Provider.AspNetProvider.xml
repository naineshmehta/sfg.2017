<?xml version="1.0"?>
<doc>
<assembly>
<name>
DotNetNuke.Provider.AspNetProvider
</name>
</assembly>
<members>
<member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.CreateDNNUser(DotNetNuke.Entities.Users.UserInfo@)">
 -----------------------------------------------------------------------------
 <summary>
 CreateDNNUser persists the DNN User information to the Database
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to persist to the Data Store.</param>
	<returns>The UserId of the newly created user.</returns>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.CreateMemberhipUser(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 CreateMemberhipUser persists the User as an AspNet MembershipUser to the AspNet
 Data Store
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to persist to the Data Store.</param>
	<returns>A UserCreateStatus enumeration indicating success or reason for failure.</returns>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.DeleteMembershipUser(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteMembershipUser deletes the User as an AspNet MembershipUser from the AspNet
 Data Store
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to delete from the Data Store.</param>
	<returns>A Boolean indicating success or failure.</returns>
	<history>
     [cnurse]	12/22/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.FillUserCollection(System.Int32,System.Data.IDataReader,System.Boolean,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 FillUserCollection fills an ArrayList from a collection Asp.Net MembershipUsers
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="dr">The data reader corresponding to the User.</param>
	<param name="isHydrated">A flag that determines whether the user is hydrated.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	03/30/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.FillUserCollection(System.Int32,System.Data.IDataReader,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 FillUserCollection fills an ArrayList from a collection Asp.Net MembershipUsers
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="dr">The data reader corresponding to the User.</param>
	<param name="isHydrated">A flag that determines whether the user is hydrated.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	06/15/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.FillUserInfo(System.Int32,System.Data.IDataReader,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 FillUserInfo fills a User Info object from a data reader
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="dr">The data reader corresponding to the User.</param>
	<param name="isHydrated">A flag that determines whether the user is hydrated.</param>
	<param name="CheckForOpenDataReader">Flag to determine whether to chcek if the datareader is open</param>
	<returns>The User as a UserInfo object</returns>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.FillUserMembership(System.Web.Security.MembershipUser,DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Builds a UserMembership object from an AspNet MembershipUser
 </summary>
	<remarks>
	</remarks>
	<param name="aspNetUser">The MembershipUser object to use to fill the DNN UserMembership.</param>
	<history>
 	[cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetMembershipUser(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Gets an AspNet MembershipUser from the DataStore
 </summary>
	<param name="user">The user to get from the Data Store.</param>
	<returns>The User as a AspNet MembershipUser object</returns>
	<history>
     [cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetMembershipUser(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets an AspNet MembershipUser from the DataStore
 </summary>
	<param name="userName">The name of the user.</param>
	<returns>The User as a AspNet MembershipUser object</returns>
	<history>
     [cnurse]	04/25/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetTotalRecords(System.Data.IDataReader@)">
 -----------------------------------------------------------------------------
 <summary>
 The GetTotalRecords method gets the number of Records returned.
 </summary>
	<param name="dr">An <see cref="T:System.Data.IDataReader"/> containing the Total no of records</param>
	<returns>An Integer</returns>
	<history>
 	[cnurse]	03/30/2006	Created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUserByAuthToken(System.Int32,System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 GetUserByAuthToken retrieves a User from the DataStore using an Authentication Token
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="userToken">The authentication token of the user being retrieved from the Data Store.</param>
	<param name="authType">The type of Authentication Used</param>
	<param name="isHydrated">A flag that determines whether the user is hydrated.</param>
	<returns>The User as a UserInfo object</returns>
	<history>
     [cnurse]	07/09/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UpdateUserMembership(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 UpdateUserMembership persists a user's Membership to the Data Store
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to persist to the Data Store.</param>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.ValidateUser(System.Int32,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Validates the users credentials against the Data Store
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal the user belongs to</param>
	<param name="username">The user name of the User attempting to log in</param>
	<param name="password">The password of the User attempting to log in</param>
	<returns>A Boolean result</returns>
	<history>
     [cnurse]	12/12/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.AspNetMembershipProvider.CanEditProviderProperties">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the Provider Properties can be edited
 </summary>
	<returns>A Boolean</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.AspNetMembershipProvider.MaxInvalidPasswordAttempts">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the maximum number of invlaid attempts to login are allowed
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.AspNetMembershipProvider.MinNonAlphanumericCharacters">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Mimimum no of Non AlphNumeric characters required
 </summary>
	<returns>An Integer.</returns>
	<history>
     [cnurse]	02/07/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.AspNetMembershipProvider.MinPasswordLength">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Mimimum Password Length
 </summary>
	<returns>An Integer.</returns>
	<history>
     [cnurse]	02/07/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.AspNetMembershipProvider.PasswordAttemptWindow">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the window in minutes that the maxium attempts are tracked for
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.AspNetMembershipProvider.PasswordFormat">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets the Password Format as set in the web.config file
 </summary>
	<returns>A PasswordFormat enumeration.</returns>
	<history>
     [cnurse]	02/07/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.AspNetMembershipProvider.PasswordResetEnabled">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Users's Password can be reset
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.AspNetMembershipProvider.PasswordRetrievalEnabled">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether the Users's Password can be retrieved
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	03/02/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.AspNetMembershipProvider.RequiresQuestionAndAnswer">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether a Question/Answer is required for Password retrieval
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	02/07/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.AspNetMembershipProvider.PasswordStrengthRegularExpression">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets a Regular Expression that deermines the strength of the password
 </summary>
	<returns>A String.</returns>
	<history>
     [cnurse]	02/07/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="P:DotNetNuke.Security.Membership.AspNetMembershipProvider.RequiresUniqueEmail">
 -----------------------------------------------------------------------------
 <summary>
 Gets and sets whether a Unique Email is required
 </summary>
	<returns>A Boolean.</returns>
	<history>
     [cnurse]	02/06/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.ChangePassword(DotNetNuke.Entities.Users.UserInfo,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 ChangePassword attempts to change the users password
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to update.</param>
	<param name="oldPassword">The old password.</param>
	<param name="newPassword">The new password.</param>
	<returns>A Boolean indicating success or failure.</returns>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.ChangePasswordQuestionAndAnswer(DotNetNuke.Entities.Users.UserInfo,System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 ChangePasswordQuestionAndAnswer attempts to change the users password Question
 and PasswordAnswer
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to update.</param>
	<param name="password">The password.</param>
	<param name="passwordQuestion">The new password question.</param>
	<param name="passwordAnswer">The new password answer.</param>
	<returns>A Boolean indicating success or failure.</returns>
	<history>
     [cnurse]	02/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.CreateUser(DotNetNuke.Entities.Users.UserInfo@)">
 -----------------------------------------------------------------------------
 <summary>
 CreateUser persists a User to the Data Store
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to persist to the Data Store.</param>
	<returns>A UserCreateStatus enumeration indicating success or reason for failure.</returns>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.DeleteUser(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 DeleteUser deletes a single User from the Data Store
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to delete from the Data Store.</param>
	<returns>A Boolean indicating success or failure.</returns>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.DeleteUsersOnline(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Deletes all UserOnline inof from the database that has activity outside of the
 time window
 </summary>
	<remarks>
	</remarks>
	<param name="TimeWindow">Time Window in Minutes</param>
	<history>
     [cnurse]	03/15/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GeneratePassword">
 -----------------------------------------------------------------------------
 <summary>
 Generates a new random password (Length = Minimum Length + 4)
 </summary>
	<returns>A String</returns>
	<history>
     [cnurse]	03/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GeneratePassword(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Generates a new random password
 </summary>
	<param name="length">The length of password to generate.</param>
	<returns>A String</returns>
	<history>
     [cnurse]	03/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetOnlineUsers(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Gets a collection of Online Users
 </summary>
	<param name="portalId">The Id of the Portal</param>
	<returns>An ArrayList of UserInfo objects</returns>
	<history>
     [cnurse]	03/15/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetPassword(DotNetNuke.Entities.Users.UserInfo,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Gets the Current Password Information for the User 
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to delete from the Data Store.</param>
	<param name="passwordAnswer">The answer to the Password Question, ues to confirm the user
 has the right to obtain the password.</param>
	<returns>A String</returns>
	<history>
     [cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUser(System.Int32,System.Int32,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 GetUserByUserName retrieves a User from the DataStore
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="userId">The id of the user being retrieved from the Data Store.</param>
	<param name="isHydrated">A flag that determines whether the user is hydrated.</param>
	<returns>The User as a UserInfo object</returns>
	<history>
     [cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUserByUserName(System.Int32,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 GetUserByUserName retrieves a User from the DataStore
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="username">The username of the user being retrieved from the Data Store.</param>
	<param name="isHydrated">A flag that determines whether the user is hydrated.</param>
	<returns>The User as a UserInfo object</returns>
	<history>
     [cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUserCountByPortal(System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 GetUserCountByPortal gets the number of users in the portal
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<returns>The no of users</returns>
	<history>
     [cnurse]	05/01/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUserMembership(DotNetNuke.Entities.Users.UserInfo@)">
 -----------------------------------------------------------------------------
 <summary>
 GetUserMembership retrieves the UserMembership information from the Data Store
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user whose Membership information we are retrieving.</param>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsers(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 GetUsers gets all the users of the portal
 </summary>
	<remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="isHydrated">A flag that determines whether the user is hydrated.</param>
	<param name="pageIndex">The page of records to return.</param>
	<param name="pageSize">The size of the page</param>
	<param name="totalRecords">The total no of records that satisfy the criteria.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	12/14/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersByEmail(System.Int32,System.Boolean,System.String,System.Int32,System.Int32,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 GetUsersByEmail gets all the users of the portal whose email matches a provided
 filter expression
 </summary>
	<remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="isHydrated">A flag that determines whether the user is hydrated.</param>
	<param name="emailToMatch">The email address to use to find a match.</param>
	<param name="pageIndex">The page of records to return.</param>
	<param name="pageSize">The size of the page</param>
	<param name="totalRecords">The total no of records that satisfy the criteria.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	12/14/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersByUserName(System.Int32,System.Boolean,System.String,System.Int32,System.Int32,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 GetUsersByUserName gets all the users of the portal whose username matches a provided
 filter expression
 </summary>
	<remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="isHydrated">A flag that determines whether the user is hydrated.</param>
	<param name="userNameToMatch">The username to use to find a match.</param>
	<param name="pageIndex">The page of records to return.</param>
	<param name="pageSize">The size of the page</param>
	<param name="totalRecords">The total no of records that satisfy the criteria.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	12/14/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersByProfileProperty(System.Int32,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
 -----------------------------------------------------------------------------
 <summary>
 GetUsersByProfileProperty gets all the users of the portal whose profile matches
 the profile property pased as a parameter
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal</param>
	<param name="isHydrated">A flag that determines whether the user is hydrated.</param>
	<param name="propertyName">The name of the property being matched.</param>
	<param name="propertyValue">The value of the property being matched.</param>
	<param name="pageIndex">The page of records to return.</param>
	<param name="pageSize">The size of the page</param>
	<param name="totalRecords">The total no of records that satisfy the criteria.</param>
	<returns>An ArrayList of UserInfo objects.</returns>
	<history>
     [cnurse]	02/01/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.IsUserOnline(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Gets whether the user in question is online
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user.</param>
	<returns>A Boolean indicating whether the user is online.</returns>
	<history>
     [cnurse]	03/14/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.ResetPassword(DotNetNuke.Entities.Users.UserInfo,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 ResetPassword resets a user's password and returns the newly created password
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to update.</param>
	<param name="passwordAnswer">The answer to the user's password Question.</param>
	<returns>The new Password.</returns>
	<history>
     [cnurse]	02/08/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UnLockUser(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 Unlocks the User's Account
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user whose account is being Unlocked.</param>
	<returns>True if successful, False if unsuccessful.</returns>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UpdateUser(DotNetNuke.Entities.Users.UserInfo)">
 -----------------------------------------------------------------------------
 <summary>
 UpdateUser persists a user to the Data Store
 </summary>
	<remarks>
	</remarks>
	<param name="user">The user to persist to the Data Store.</param>
	<history>
     [cnurse]	12/13/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UpdateUsersOnline(System.Collections.Hashtable)">
 -----------------------------------------------------------------------------
 <summary>
 Updates UserOnline info
 time window
 </summary>
	<param name="UserList">List of users to update</param>
	<history>
     [cnurse]	03/15/2006	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UserLogin(System.Int32,System.String,System.String,System.String,DotNetNuke.Security.Membership.UserLoginStatus@)">
 -----------------------------------------------------------------------------
 <summary>
 UserLogin attempts to log the user in, and returns the User if successful
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal the user belongs to</param>
	<param name="username">The user name of the User attempting to log in</param>
	<param name="password">The password of the User attempting to log in</param>
	<param name="VerificationCode">The verification code of the User attempting to log in</param>
	<param name="loginStatus">An enumerated value indicating the login status.</param>
	<returns>The User as a UserInfo object</returns>
	<history>
     [cnurse]	12/10/2005	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UserLogin(System.Int32,System.String,System.String,System.String,System.String,DotNetNuke.Security.Membership.UserLoginStatus@)">
 -----------------------------------------------------------------------------
 <summary>
 UserLogin attempts to log the user in, and returns the User if successful
 </summary>
	<remarks>
	</remarks>
	<param name="portalId">The Id of the Portal the user belongs to</param>
	<param name="username">The user name of the User attempting to log in</param>
	<param name="password">The password of the User attempting to log in (may not be used by all Auth types)</param>
	<param name="authType">The type of Authentication Used</param>
	<param name="VerificationCode">The verification code of the User attempting to log in</param>
	<param name="loginStatus">An enumerated value indicating the login status.</param>
	<returns>The User as a UserInfo object</returns>
	<history>
     [cnurse]	07/09/2007	created
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.TransferUsersToMembershipProvider">
 -----------------------------------------------------------------------------
 <summary>
 TransferUsersToMembershipProvider transfers legacy users to the
	new ASP.NET MemberRole Architecture
 </summary>
	<history>
 	[cnurse]	11/6/2004	documented
     [cnurse]    12/15/2005  Moved to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetLegacyUsers(System.Data.IDataReader)">
 -----------------------------------------------------------------------------
 <summary>
 GetLegacyUsers loads legacy Users into an ArayList
 </summary>
	<remarks>
	Used in Upgrading from v2.1.2 to v3.0.x
 </remarks>
	<param name="dr">DataReader containing the legacy Users</param>
	<history>
 	[cnurse]	11/6/2004	documented
     [cnurse]    12/15/2005  Moved to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.TransferUsers(System.Int32,System.Collections.ArrayList,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 TransferUsers transfers legacy users to the new ASP.NET MemberRole Architecture
 </summary>
	<remarks>
	</remarks>
	<param name="PortalID">Id of the Portal</param>
	<param name="arrUsers">An ArrayList of the Users</param>
	<param name="SuperUsers">A flag indicating whether the users are SuperUsers</param>
	<history>
 	[cnurse]	11/6/2004	documented
     [cnurse]    12/15/2005  Moved to MembershipProvider
 </history>
 -----------------------------------------------------------------------------

</member><member name="T:DotNetNuke.Security.Membership.AspNetMembershipProvider">
 -----------------------------------------------------------------------------
 Project:    DotNetNuke
 Namespace:  DotNetNuke.Security.Membership
 Class:      AspNetMembershipProvider
 -----------------------------------------------------------------------------
 <summary>
 The AspNetMembershipProvider overrides the default MembershipProvider to provide
 an AspNet Membership Component (MemberRole) implementation
 </summary>
	<remarks>
	</remarks>
	<history>
     [cnurse]	12/09/2005	created
 </history>
 -----------------------------------------------------------------------------

</member>
</members>
</doc>